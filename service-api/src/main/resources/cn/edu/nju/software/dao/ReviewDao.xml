<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="cn.edu.nju.software.dao.ReviewDao" >
  <resultMap id="BaseResultMap" type="cn.edu.nju.software.entity.Review" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="workId" property="workId" jdbcType="INTEGER" />
    <result column="parentId" property="parentId" jdbcType="INTEGER" />
    <result column="fromUserId" property="fromUserId" jdbcType="INTEGER" />
    <result column="toUserId" property="toUserId" jdbcType="INTEGER" />
    <result column="subCommentCount" property="subCommentCount" jdbcType="INTEGER" />
    <result column="createTime" property="createTime" jdbcType="TIMESTAMP" />
    <result column="updateTime" property="updateTime" jdbcType="TIMESTAMP" />
    <result column="content" property="content" jdbcType="LONGVARCHAR" />
  </resultMap>
  <resultMap id="ReviewVoResultMap" type="cn.edu.nju.software.vo.ReviewVo">
    <id column="review.id" property="review.id"  />
    <result column="review.workId" property="review.workId"  />
    <result column="review.parentId" property="review.parentId" />
    <result column="review.fromUserId" property="review.fromUserId"/>
    <result column="review.toUserId" property="review.toUserId"  />
    <result column="review.subCommentCount" property="review.subCommentCount" />
    <result column="review.createTime" property="review.createTime" />
    <result column="review.updateTime" property="review.updateTime"  />
    <result column="review.content" property="review.content"  />
    <association property="fromUser" javaType="cn.edu.nju.software.entity.User">
      <id property="id" column="fromUser.id"/>
      <result property="nickname" column="fromUser.workId"/>
      <result property="sex" column="fromUser.sex"/>
      <result property="city" column="fromUser.city"/>
      <result property="company" column="fromUser.company"/>
      <result property="email" column="fromUser.company"/>
    </association>
    <association property="toUser" javaType="cn.edu.nju.software.entity.User">
      <id property="id" column="toUser.id"/>
      <result property="nickname" column="toUser.workId"/>
      <result property="sex" column="toUser.sex"/>
      <result property="city" column="toUser.city"/>
      <result property="company" column="toUser.company"/>
      <result property="email" column="toUser.company"/>
    </association>
  </resultMap>
  <sql id="All_Column_List" >
    id, workId, parentId, fromUserId, toUserId, content,subCommentCount, createTime, updateTime
  </sql>
  <sql id="ReviewVoFields" >
    review.id, review.workId, review.parentId, review.fromUserId, review.toUserId, review.content,review.subCommentCount,review.createTime,review.updateTime,
    user.id,user.nickname,user.sex,user.city,user.company,user.email
  </sql>

  <select id="getReviewById" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="All_Column_List" />
    from reviews
    where id = #{id,jdbcType=INTEGER}
  </select>

  <select id="getReviewListByParentId" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select
    <include refid="All_Column_List" />
    from reviews
    where workId = #{workId} and parentId = #{parentId}
  </select>
  <select id="getReviewListByWorkId" resultType="cn.edu.nju.software.entity.Review">
    select
    <include refid="All_Column_List" />
    from reviews
    where workId = #{workId}
    order by createTime
    limit #{offset},#{limit}
  </select>
    <select id="getReviewIdListByParentId" resultType="java.lang.Integer">
        select id
        from reviews
        where workId = #{workId} and parentId = #{parentId}
    </select>
    <select id="canDeleteByWorkAuthor" resultType="java.lang.Integer">
        select reviews.id
        from reviews left outer join works on reviews.workId = works.id
        where reviews.id in
        <foreach collection="idList" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
        and
        works.userId = #{userId}

    </select>
    <select id="getReviewCountByWorkId" resultType="java.lang.Integer">
      select count(DISTINCT id)
      from reviews
      where workId = #{workId}
    </select>
  <select id="getReviewVoListByWorkId" resultMap="ReviewVoResultMap">
    select <include refid="ReviewVoFields"/>
    from (select * from reviews where workId = #{workId}) as review
    left outer join (select * from user) as user on review.id =
  </select>


  <delete id="deleteById" parameterType="java.lang.Integer" >
    delete from reviews
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="delSubCommentCount">
    update reviews
    set subCommentCount=subCommentCount-1
    where workId = #{workId} and id = #{id}
  </delete>
    <delete id="deleteByIdList">
      delete from reviews
      WHERE
      id in
      <foreach collection="idList" item="id" open="(" separator="," close=")">
          #{id}
      </foreach>
    </delete>
    <insert id="saveReview" parameterType="cn.edu.nju.software.entity.Review" >
    insert into reviews (<include refid="All_Column_List"/>)
    values (#{id}, #{workId}, #{parentId}, #{fromUserId}, #{toUserId}, #{content},#{subCommentCount}, #{createTime}, #{updateTime}
      )
  </insert>
  <insert id="addSubCommentCount">
    update reviews
    set subCommentCount=subCommentCount+1
    where workId = #{workId} and id = #{id}
  </insert>
  <update id="updateById" parameterType="cn.edu.nju.software.entity.Review" >
    update reviews
    set worksId = #{worksid,jdbcType=INTEGER},
      parentId = #{parentid,jdbcType=INTEGER},
      fromUserId = #{fromuserid,jdbcType=INTEGER},
      toUserId = #{touserid,jdbcType=INTEGER},
      subCommentCount = #{subcommentcount,jdbcType=INTEGER},
      createTime = #{createtime,jdbcType=TIMESTAMP},
      updateTime = #{updatetime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>

</mapper>